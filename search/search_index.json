{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"copier-template-tester \u2693\ufe0e Parametrize copier templates to test for syntax errors, check the expected output, and to check against copier versions. Note that ctt only tests the copier copy operation and doesn\u2019t check the update behavior and any version-specific logic that your template may contain because of how quickly those tests become complex. One last caveat is that copier question defaults won\u2019t work with how the test is run. So you\u2019ll need to provide values in ctt.toml for any values you want filled. Usage \u2693\ufe0e Configuration File \u2693\ufe0e When creating a copier template repository, you\u2019ll need to follow the nested \u201csubdirectory\u201d approach so that the directory looks like this: \u2514\u2500\u2500 template_dir \u2502 \u2514\u2500\u2500 {{ _copier_conf.answers_file }} .jinja \u251c\u2500\u2500 README.md \u251c\u2500\u2500 copier.yml \u2514\u2500\u2500 ctt.toml Create a new ctt.toml file in the top-level directory of your copier repository. Populate the file to look like the below example. # Specify the subdirectory name that contains the template [ctt] source_directory = \"template_dir\" # Specify the defaults that are shared across all 'output' [defaults] project_name = \"placeholder\" copyright_year = 2022 include_all = true # Parametrize each output with a relative path and optionally any values to override [output.\".ctt/defaults\"] [output.\".ctt/no_all\"] package_name = \"testing-no-all\" include_all = false Pre-Commit Hook \u2693\ufe0e First, add this section to your .pre-commit-config.yml file: repos : - repo : https://github.com/KyleKing/copier-template-tester rev : main hooks : - id : copier-template-tester Install and update to the latest revision: pre-commit autoupdate The run with pre-commit : pre-commit run --all-files copier-template-tester pipx \u2693\ufe0e You can also try ctt as a CLI tool by installing with pipx : pipx install copier-template-tester cd ~/your/copier/project ctt More Examples \u2693\ufe0e For more example code, see the tests directory or how this utility is used in a real project: KyleKing/calcipy_template Project Status \u2693\ufe0e See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG . Contributing \u2693\ufe0e We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE Code of Conduct \u2693\ufe0e We follow the Contributor Covenant Code of Conduct . Open Source Status \u2693\ufe0e We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights Responsible Disclosure \u2693\ufe0e If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com . License \u2693\ufe0e LICENSE","title":"copier-template-tester"},{"location":"#copier-template-tester","text":"Parametrize copier templates to test for syntax errors, check the expected output, and to check against copier versions. Note that ctt only tests the copier copy operation and doesn\u2019t check the update behavior and any version-specific logic that your template may contain because of how quickly those tests become complex. One last caveat is that copier question defaults won\u2019t work with how the test is run. So you\u2019ll need to provide values in ctt.toml for any values you want filled.","title":"copier-template-tester"},{"location":"#usage","text":"","title":"Usage"},{"location":"#configuration-file","text":"When creating a copier template repository, you\u2019ll need to follow the nested \u201csubdirectory\u201d approach so that the directory looks like this: \u2514\u2500\u2500 template_dir \u2502 \u2514\u2500\u2500 {{ _copier_conf.answers_file }} .jinja \u251c\u2500\u2500 README.md \u251c\u2500\u2500 copier.yml \u2514\u2500\u2500 ctt.toml Create a new ctt.toml file in the top-level directory of your copier repository. Populate the file to look like the below example. # Specify the subdirectory name that contains the template [ctt] source_directory = \"template_dir\" # Specify the defaults that are shared across all 'output' [defaults] project_name = \"placeholder\" copyright_year = 2022 include_all = true # Parametrize each output with a relative path and optionally any values to override [output.\".ctt/defaults\"] [output.\".ctt/no_all\"] package_name = \"testing-no-all\" include_all = false","title":"Configuration File"},{"location":"#pre-commit-hook","text":"First, add this section to your .pre-commit-config.yml file: repos : - repo : https://github.com/KyleKing/copier-template-tester rev : main hooks : - id : copier-template-tester Install and update to the latest revision: pre-commit autoupdate The run with pre-commit : pre-commit run --all-files copier-template-tester","title":"Pre-Commit Hook"},{"location":"#pipx","text":"You can also try ctt as a CLI tool by installing with pipx : pipx install copier-template-tester cd ~/your/copier/project ctt","title":"pipx"},{"location":"#more-examples","text":"For more example code, see the tests directory or how this utility is used in a real project: KyleKing/calcipy_template","title":"More Examples"},{"location":"#project-status","text":"See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG .","title":"Project Status"},{"location":"#contributing","text":"We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE","title":"Contributing"},{"location":"#code-of-conduct","text":"We follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"#open-source-status","text":"We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights","title":"Open Source Status"},{"location":"#responsible-disclosure","text":"If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com .","title":"Responsible Disclosure"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"docs/CHANGELOG/","text":"Unreleased \u2693\ufe0e Feat \u2693\ufe0e first implementation of ctt init with copier Fix \u2693\ufe0e use the public run_auto instead of .copy remove folder deletion","title":"Docs"},{"location":"docs/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"docs/CHANGELOG/#feat","text":"first implementation of ctt init with copier","title":"Feat"},{"location":"docs/CHANGELOG/#fix","text":"use the public run_auto instead of .copy remove folder deletion","title":"Fix"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-11-18 .pre-commit-config.yaml:48 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-11-18 scripts/check_imports.py:7 FIXME Can these defaults be selected? 2022-11-20 tests/data/copier_demo/ctt.toml:8 Found code tags for FIXME (3)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-11-18 .pre-commit-config.yaml:48 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-11-18 scripts/check_imports.py:7 FIXME Can these defaults be selected? 2022-11-20 tests/data/copier_demo/ctt.toml:8 Found code tags for FIXME (3)","title":"Task Summary"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/kyleking/copier-template-tester.git cd copier-template-tester poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage copier_template_tester/__init__.py 2 0 0 100.0% copier_template_tester/main.py 38 0 5 100.0% Totals 40 0 5 100.0% Generated on: 2022-11-20","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/kyleking/copier-template-tester.git cd copier-template-tester poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage copier_template_tester/__init__.py 2 0 0 100.0% copier_template_tester/main.py 38 0 5 100.0% Totals 40 0 5 100.0% Generated on: 2022-11-20","title":"Current Status"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below. Commitizen Types and Scopes \u2693\ufe0e type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Git Description Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.","title":"Git"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Description Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"ADRs"},{"location":"modules/copier_template_tester/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Copier template tester"},{"location":"modules/copier_template_tester/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/copier_template_tester/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/copier_template_tester/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"reference/SUMMARY/","text":"copier_template_tester * main","title":"SUMMARY"},{"location":"reference/copier_template_tester/","text":"copier_template_tester.","title":"copier_template_tester"},{"location":"reference/copier_template_tester/main/","text":"Copier Template Tester. Based on: https://github.com/copier-org/copier/blob/ccfbc9a923f4228af7ca2bf067493665aa15d07c/tests/helpers.py#L20-L81 Functions \u2693\ufe0e run \u2693\ufe0e run ( base_dir = None ) Main class to run ctt. Source code in copier_template_tester/main.py @beartype def run ( base_dir : Path | None = None ) -> None : \"\"\"Main class to run ctt.\"\"\" base_dir = base_dir or Path . cwd () config = _load_config ( base_dir ) defaults = config . get ( 'defaults' , {}) input_path = base_dir / config [ 'ctt' ][ 'source_directory' ] for key , data in config [ 'output' ] . items (): output_path = base_dir / key output_path . mkdir ( parents = True , exist_ok = True ) print ( f 'Creating: { output_path } ' ) # noqa: T001 _render ( input_path , base_dir / output_path , data = defaults | data )","title":"main"},{"location":"reference/copier_template_tester/main/#copier_template_tester.main-functions","text":"","title":"Functions"},{"location":"reference/copier_template_tester/main/#copier_template_tester.main.run","text":"run ( base_dir = None ) Main class to run ctt. Source code in copier_template_tester/main.py @beartype def run ( base_dir : Path | None = None ) -> None : \"\"\"Main class to run ctt.\"\"\" base_dir = base_dir or Path . cwd () config = _load_config ( base_dir ) defaults = config . get ( 'defaults' , {}) input_path = base_dir / config [ 'ctt' ][ 'source_directory' ] for key , data in config [ 'output' ] . items (): output_path = base_dir / key output_path . mkdir ( parents = True , exist_ok = True ) print ( f 'Creating: { output_path } ' ) # noqa: T001 _render ( input_path , base_dir / output_path , data = defaults | data )","title":"run()"}]}