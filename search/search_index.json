{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"copier-template-tester","text":"<p>Parametrize copier templates to test for syntax errors, check the expected output, and to check against copier versions.</p> <p>Note that <code>ctt</code> only tests the <code>copier copy</code> operation and doesn\u2019t check the <code>update</code> behavior and any version-specific logic that your template may contain because of how quickly those tests become complex.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#configuration-file","title":"Configuration File","text":"<p>When creating a copier template repository, I recommend following the nested \u201csubdirectory\u201d approach so that the directory looks like this:</p> <pre><code>\u2514\u2500\u2500 template_dir\n\u2502   \u2514\u2500\u2500 {{ _copier_conf.answers_file }}.jinja\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 copier.yml\n\u2514\u2500\u2500 ctt.toml\n</code></pre> <p>Create a new <code>ctt.toml</code> file in the top-level directory of your copier repository. Populate the file to look like the below example.</p> <pre><code># Specify shared data across all 'output' destinations\n# Note that the copier.yml defaults are used whenever the key is not set in this file\n[defaults]\nproject_name = \"placeholder\"\ncopyright_year = 2022\n\n# Parametrize each output with a relative path and optionally any values to override\n[output.\".ctt/defaults\"]\n\n[output.\".ctt/no_all\"]\npackage_name = \"testing-no-all\"\ninclude_all = false\n</code></pre>"},{"location":"#pre-commit-hook","title":"Pre-Commit Hook","text":"<p>First, add this section to your <code>.pre-commit-config.yml</code> file:</p> <pre><code>repos:\n  - repo: https://github.com/KyleKing/copier-template-tester\n    rev: main\n    hooks:\n      - id: copier-template-tester\n</code></pre> <p>Install and update to the latest revision:</p> <pre><code>pre-commit autoupdate\n</code></pre> <p>The run with <code>pre-commit</code>:</p> <pre><code>pre-commit run --all-files copier-template-tester\n</code></pre>"},{"location":"#pipx","title":"pipx","text":"<p>You can also try <code>ctt</code> as a CLI tool by installing with <code>pipx</code>:</p> <pre><code>pipx install copier-template-tester\n\ncd ~/your/copier/project\nctt\n</code></pre>"},{"location":"#more-examples","title":"More Examples","text":"<p>For more example code, see the scripts directory or the tests.</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#213-2024-07-08","title":"2.1.3 (2024-07-08)","text":""},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>update minimum Python version to 3.10.9</li> </ul>"},{"location":"docs/CHANGELOG/#213rc0-2024-07-05","title":"2.1.3rc0 (2024-07-05)","text":""},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>wheel: don\u2019t distribute top-level LICENSE file (#33)</li> </ul>"},{"location":"docs/CHANGELOG/#212-2024-05-02","title":"2.1.2 (2024-05-02)","text":""},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>#31: defer to copier for template loading logic</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>update ruff</li> </ul>"},{"location":"docs/CHANGELOG/#211-2023-11-23","title":"2.1.1 (2023-11-23)","text":""},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>#28: catch untracked .ctt directory</li> <li>#28: append ctt-specific exclude rules</li> </ul>"},{"location":"docs/CHANGELOG/#210-2023-11-21","title":"2.1.0 (2023-11-21)","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>improve error handling for recursion</li> <li>#25: add test when _subdir is not specified</li> </ul>"},{"location":"docs/CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>patch Nox with Python 3.12</li> <li>don\u2019t remove the dst_path before copier run (from #24)</li> <li>include defaults in _exclude documentation</li> </ul>"},{"location":"docs/CHANGELOG/#201-2023-11-08","title":"2.0.1 (2023-11-08)","text":""},{"location":"docs/CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>#27: skip running copier when no copier.ya?ml file is present</li> </ul>"},{"location":"docs/CHANGELOG/#200-2023-10-14","title":"2.0.0 (2023-10-14)","text":""},{"location":"docs/CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>specifically handle templates that can\u2019t be updated</li> <li>check for answers file template</li> <li>#24: only write an answers file if there is content</li> <li>remove unused F401 and H303</li> <li>update copier to latest to unblock pydantic v2 upgrade</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove optional beartype</li> <li> <p>use literal to try to fix pyright errors</p> </li> <li> <p>pending pydantic v2 support</p> </li> </ul>"},{"location":"docs/CHANGELOG/#126-2023-06-05","title":"1.2.6 (2023-06-05)","text":""},{"location":"docs/CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>support unsafe templates that utilize tasks</li> </ul>"},{"location":"docs/CHANGELOG/#125-2023-06-05","title":"1.2.5 (2023-06-05)","text":""},{"location":"docs/CHANGELOG/#fix_8","title":"Fix","text":"<ul> <li>support copier 8</li> </ul>"},{"location":"docs/CHANGELOG/#124-2023-05-22","title":"1.2.4 (2023-05-22)","text":""},{"location":"docs/CHANGELOG/#fix_9","title":"Fix","text":"<ul> <li>#20: set commit to HEAD</li> </ul>"},{"location":"docs/CHANGELOG/#123-2023-05-17","title":"1.2.3 (2023-05-17)","text":""},{"location":"docs/CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>improve log output on post-copier steps</li> </ul>"},{"location":"docs/CHANGELOG/#123rc0-2023-05-17","title":"1.2.3rc0 (2023-05-17)","text":""},{"location":"docs/CHANGELOG/#fix_10","title":"Fix","text":"<ul> <li>#18: ensure a single trailing newline at end of answerfile</li> <li>bump minimum pymdown dependency</li> </ul>"},{"location":"docs/CHANGELOG/#122-2023-05-11","title":"1.2.2 (2023-05-11)","text":""},{"location":"docs/CHANGELOG/#fix_11","title":"Fix","text":"<ul> <li>improve logging when run from pre-commit</li> </ul>"},{"location":"docs/CHANGELOG/#121-2023-05-11","title":"1.2.1 (2023-05-11)","text":""},{"location":"docs/CHANGELOG/#fix_12","title":"Fix","text":"<ul> <li>start implementation to replace the src_path</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>run calcipy tool suite</li> <li>merge stabilization code</li> <li>provide better CLI output</li> </ul>"},{"location":"docs/CHANGELOG/#120-2023-04-22","title":"1.2.0 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>support templated copier answer files</li> </ul>"},{"location":"docs/CHANGELOG/#120rc1-2023-04-22","title":"1.2.0rc1 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#fix_13","title":"Fix","text":"<ul> <li>write the commit as \u2018-0\u2019 each time</li> </ul>"},{"location":"docs/CHANGELOG/#120rc0-2023-04-22","title":"1.2.0rc0 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>remove _commit from the answers file</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>experiment with a shadow copy</li> <li>use capture_shell</li> <li>split the main logic into three files</li> </ul>"},{"location":"docs/CHANGELOG/#110-2023-04-22","title":"1.1.0 (2023-04-22)","text":""},{"location":"docs/CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>add CLI arguments</li> </ul>"},{"location":"docs/CHANGELOG/#fix_14","title":"Fix","text":"<ul> <li>correctly handle files in untracked directories</li> <li>#3: return error in pre-commit on new output directories (#5)</li> <li>#2: resolve issues in Github Workflows</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>switch to the corallium logger</li> </ul>"},{"location":"docs/CHANGELOG/#102-2022-11-20","title":"1.0.2 (2022-11-20)","text":""},{"location":"docs/CHANGELOG/#fix_15","title":"Fix","text":"<ul> <li>use VCS-ref HEAD and remove .git if found</li> </ul>"},{"location":"docs/CHANGELOG/#101-2022-11-20","title":"1.0.1 (2022-11-20)","text":""},{"location":"docs/CHANGELOG/#fix_16","title":"Fix","text":"<ul> <li>use the proper directory for copier run</li> </ul>"},{"location":"docs/CHANGELOG/#100-2022-11-20","title":"1.0.0 (2022-11-20)","text":""},{"location":"docs/CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>first implementation of ctt</li> <li>init with copier</li> </ul>"},{"location":"docs/CHANGELOG/#fix_17","title":"Fix","text":"<ul> <li>trying to defer to defaults</li> <li>use the public run_auto instead of .copy</li> <li>remove folder deletion</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File PLANNED In python 3.10, there is a Beartype error for this return annotation: 2023-10-14 copier_template_tester/_write_output.py:96 <p>Found code tags for PLANNED (1)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/copier-template-tester.git\ncd copier-template-tester\npoetry install --sync\npoetry run calcipy-pack pack.install-extras\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>copier_template_tester/__init__.py</code> 4 0 0 100.0% <code>copier_template_tester/_config.py</code> 14 0 3 100.0% <code>copier_template_tester/_pre_commit_support.py</code> 13 0 0 93.3% <code>copier_template_tester/_runtime_type_check_setup.py</code> 13 0 28 100.0% <code>copier_template_tester/_write_output.py</code> 76 0 13 96.9% <code>copier_template_tester/main.py</code> 30 4 20 86.7% Totals 150 4 64 95.5% <p>Generated on: 2024-07-08</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li>(2) Try for 50 characters, but consider 72 the hard limit</li> <li>(7) Use the body to explain what and why vs. how</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see [labels.yml][labels]</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane GitHub Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>[Git: The Simple Guide][simple_git]</li> <li>[Commit Messages][gcmsg] and why use the present tense</li> <li>GitHub\u2019s Advice on GitHub</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>https://github.com/AICoE/aicoe-ci/blob/39de02af86a0d1f9dcd395fa88b858f1c6880411/docs/adr/0000-use-markdown-architectural-decision-records.md</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"reference/copier_template_tester/main/","title":"Main","text":"<p>Copier Template Tester.</p> <p>Based on: https://github.com/copier-org/copier/blob/ccfbc9a923f4228af7ca2bf067493665aa15d07c/tests/helpers.py#L20-L81</p>"},{"location":"reference/copier_template_tester/main/#copier_template_tester.main-attributes","title":"Attributes","text":""},{"location":"reference/copier_template_tester/main/#copier_template_tester.main-functions","title":"Functions","text":""},{"location":"reference/copier_template_tester/main/#copier_template_tester.main.run","title":"run","text":"<pre><code>run(*, base_dir=None, check_untracked=False)\n</code></pre> <p>Entry point.</p> Source code in <code>copier_template_tester/main.py</code> <pre><code>def run(*, base_dir: Path | None = None, check_untracked: bool = False) -&gt; None:\n    \"\"\"Entry point.\"\"\"\n    base_dir = base_dir or Path.cwd()\n    try:\n        read_copier_template(base_dir=base_dir)\n    except FileNotFoundError:\n        message = f\"Please add a '{DEFAULT_TEMPLATE_FILE_NAME}' file to '{base_dir}'\"\n        logger.warning(message)\n        return\n\n    logger.text(f'Starting Copier Template Tester for {base_dir}')\n    logger.text('\\tNote: If files were modified, pre-commit will report a failure.')\n    logger.text('')\n    config = load_config(base_dir)\n    defaults = config.get('defaults', {})\n\n    input_path = base_dir\n    paths = set()\n    for key, data in config['output'].items():\n        output_path = base_dir / key\n        paths.add(output_path)\n        logger.text(f'Using `copier` to create: {key}')\n        write_output(src_path=input_path, dst_path=base_dir / output_path, data=defaults | data)\n\n    if check_untracked:  # pragma: no cover\n        check_for_untracked(base_dir)\n</code></pre>"},{"location":"reference/copier_template_tester/main/#copier_template_tester.main.run_cli","title":"run_cli","text":"<pre><code>run_cli()\n</code></pre> <p>Accept CLI configuration for running ctt.</p> Source code in <code>copier_template_tester/main.py</code> <pre><code>def run_cli() -&gt; None:  # pragma: no cover\n    \"\"\"Accept CLI configuration for running ctt.\"\"\"\n    def dir_path(pth: str | None) -&gt; Path:\n        if pth and Path(pth).is_dir():\n            return Path(pth).resolve()\n        msg = f'Expected a path to a directory. Received: `{pth}`'\n        raise ArgumentTypeError(msg)\n\n    cli = ArgumentParser()\n    cli.add_argument(\n        '-b',\n        '--base-dir',\n        help='Specify the path to the directory that contains the configuration file',\n        type=dir_path)\n    cli.add_argument('--check-untracked', help='Only used for pre-commit', action='store_true')\n\n    args = cli.parse_args()\n    run(base_dir=args.base_dir, check_untracked=args.check_untracked)\n</code></pre>"}]}